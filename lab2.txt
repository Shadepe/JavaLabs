Портировать одну из структур данных, приведенных в cprog.

Набор операций для структуры данных:
· добавление в конец, получение, вставка и удаление по логическому номеру (индексу). Логический номер – порядковый номер хранимого элемента в соответствии с последовательностью обхода структуры данных (перебора элементов)
· для исходно упорядоченной (например, «двоичное дерево») вставка с сохранением порядка, получение и удаление по по логическому номеру (индексу)
· Итератор forEach – для Java: интерфейс обратного вызова с методом void toDo(T v), итератора получает ссылку на интерфейсный объект (анонимный класс), обходит структуру данных и вызывает метод для каждого выбранного элемента. В Scala – формальный параметр = функция.
· сортировка, для исходно упорядоченной – балансировка = создание экземпляра структуры данных с равными размерностями компонент (например, сбалансированное дерево, либо список списков со списками нижнего уровня равной длины)

Элемент структуры данных хранит целое число.
Варианты заданий

Структура данных:
    Двоичное дерево
    Двоичное дерево в массиве
    Дерево, упорядоченное вертикально
    Дерево, упорядоченное вертикально в массиве (пирамида)
    Дерево с распределением по разрядам ключа
    Хэш-таблица: вектор, содержащий заголовки списков
    Односвязный список
    Двусвязный разомкнутый список
    Циклический список
    Список с массивом ссылок в каждом элементе
    Список, содержащий заголовки списков.
    Вектор, содержащий заголовки списков.

Алгоритм сортировки для вариантов 7-12 (эффективный NlogN):
    Рекурсивное разделение
    Рекурсивное слияние
    Циклическое слияние
    Однократное слияние
    Лексикографическая сортировка

В main написать тестовую последовательность создания объекта структуры данных  и выполнения над ним операций с трассировкой результатов